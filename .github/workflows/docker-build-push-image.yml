name: Build and Push Docker image

on:
  workflow_call:
    inputs:
      aws_ecr:
        description: "Push to AWS ECR"
        default: true
        required: false
        type: boolean
      docker_hub:
        description: "Push to Docker Hub"
        default: true
        required: false
        type: boolean
    secrets:
      AWS_ACCOUNT_ID:
        description: "The AWS account ID used to determine the ECR registry"
        required: true
      AWS_REGION:
        description: "The AWS region used to determine the ECR registry"
        required: true
      AWS_ECR_ACCESS_KEY_ID:
        description: "The access key ID used to log into AWS ECR"
        required: true
      AWS_ECR_SECRET_ACCESS_KEY:
        description: "The secret access key ID used to log into AWS ECR"
        required: true
      DOCKERHUB_USERNAME:
        description: "The username used to log into Docker Hub"
        required: true
      DOCKERHUB_PASSWORD:
        description: "The password used to log into Docker Hub"
        required: true

permissions:
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    steps:
      - name: Checkout code
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          # Never deploy from non-main branches
          ref: main

      - name: Check if Dockerfile is present
        id: dockerfile-exists
        run: |
          dockerfile_exists=$(test -f Dockerfile && echo 'true' || echo 'false')
          if [ "${dockerfile_exists}" == "false" ]; then
            echo "::warning:: Skip deploy due to missing Dockerfile"
          fi
          echo "::set-output name=result::${dockerfile_exists}"

      - name: Set up Docker Buildx
        if: steps.dockerfile-exists.outputs.result == 'true'
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      - name: Cache Docker layers
        if: steps.dockerfile-exists.outputs.result == 'true'
        uses: actions/cache@136d96b4aee02b1f0de3ba493b1d47135042d9c0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7
        if: ${{steps.dockerfile-exists.outputs.result == 'true' && inputs.docker_hub}}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to ECR
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7
        if: ${{steps.dockerfile-exists.outputs.result == 'true' && inputs.aws_ecr}}
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}

      - name: Build Docker image
        if: ${{steps.dockerfile-exists.outputs.result == 'true' && (inputs.docker_hub || inputs.aws_ecr)}}
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: ./Dockerfile
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Push to Docker Hub
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        if: ${{steps.dockerfile-exists.outputs.result == 'true' && inputs.docker_hub}}
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ github.event.repository.full_name }}:latest
            ${{ github.event.repository.full_name }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Push to AWS ECR
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        if: ${{steps.dockerfile-exists.outputs.result == 'true' && inputs.aws_ecr}}
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ github.event.repository.name }}:production
            ${{ env.ECR_REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
