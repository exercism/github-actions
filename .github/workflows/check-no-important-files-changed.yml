name: No important files changed

on:
  workflow_call:
    inputs:
      repository:
        description: "The pull request owner's repository"
        required: true
        type: string
      ref:
        description: "The pull requests's reference"
        required: true
        type: string

permissions:
  pull-requests: write

jobs:
  no_important_files_changed:
    name: No important files changed
    runs-on: ubuntu-22.04
    steps:
      - name: Check if important files changed
        id: check
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number

            return github.rest.pulls.listFiles({ owner, repo, pull_number })
              .then(async ({ data: files }) => {
                const filenames = files.filter(file => file.status !== "added").map(file => file.filename);
                console.log(`Files in PR: ${filenames}`);

                // Cache the parsed exercise config file's invalidator files
                let exerciseInvalidatorFiles = {};

                return filenames.some(async (filename) => {
                  const match = /^exercises\/(?<type>practice|concept)\/(?<slug>[^\/]+)\/(?<path>.+)$/i.exec(filename);
                  if (match?.groups === undefined) {
                    console.log(`${filename}: skipped (can't invalidate test results)`);
                    return false;
                  }

                  const { type, slug, path } = match.groups;
                  const configFile = `exercises/${type}/${slug}/.meta/config.json`;

                  const parseInvalidatorFiles = (path) => {
                    return github.rest.repos
                      .getContent({ owner, repo, path })
                      .then(({ data: { content } }) => JSON.parse(Buffer.from(content, "base64").toString()))
                      .then((config) => {
                        const files = config.files;
                        if (files === undefined) {
                          return [];
                        }

                        return [].concat(
                          files["invalidator"] || [],
                          files["test"] || [],
                          files["editor"] || []
                        );
                      })
                      .catch((err) => []);
                  };

                  exerciseInvalidatorFiles[slug] ||= await parseInvalidatorFiles(configFile);
                  const invalidatesTests = exerciseInvalidatorFiles[slug].includes(path)

                  if (invalidatesTests) {
                    console.log(`${filename}: invalidates test results`);
                  } else {
                    console.log(`${filename}: does not invalidate test results`);
                  }

                  return invalidatesTests;
                });
              })
              .catch((err) => false);

      - name: Suggest to add [no important files changed]
        if: steps.check.outputs.result == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const body = "This PR touches files which potentially affect the outcome of the tests of an exercise. This will cause all students' solutions to affected exercises to be re-tested.\n\nIf this PR does **not** affect the result of the test (or, for example, adds an edge case that is not worth rerunning all tests for), **please add the following to the merge-commit message** which will stops student's tests from re-running. Please copy-paste to avoid typos.\n```\n[no important files changed]\n```\n\n For more information, refer to the [documentation](https://exercism.org/docs/building/tracks#h-avoiding-triggering-unnecessary-test-runs). If you are unsure whether to add the message or not, please ping `@exercism/maintainers-admin` in a comment. Thank you!"
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
